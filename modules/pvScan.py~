# pvScan module

from epics import caget,caput,PV
from time import sleep
import datetime,math,os,sys
import subprocess

# PV prefix of pvScan IOC
pvPrefix=os.environ['PVSCAN_PVPREFIX']

# PV for status message
msgPv=PV(pvPrefix + ':MSG')

# Get PID for abort button
pid=os.getpid()
pidPV=PV(pvPrefix + ':PID')
pidPV.put(pid)

##################################################################################################################

def timestamp(format=0):
    "Formatted timestamp"
    if format:
        return(datetime.datetime.now().strftime("%Y%m%d_%H%M%S.%f"))
    else:
        return(datetime.datetime.now().strftime("%Y%m%d_%H%M%S"))
        
class Tee(object):
    "Writes output to stdout and to log file"
    def __init__(self, name, mode):
        self.file = open(name, mode)
        self.stdout = sys.stdout
        sys.stdout = self
    def __del__(self):
        sys.stdout = self.stdout
        self.file.close()
    def write(self, data):
        self.file.write(data)
        self.stdout.write(data)

def motorWait(motor,val,delta=0.005):
    "Waits until motor has stopped to proceed"
    while motor.get() != val:
        if math.fabs(motor.get() - val) < delta: break
        continue

def grabImages(grabImagesN,cameraPvPrefix,grabImagesFilepath,grabImagesPlugin='TIFF1',grabImagesFilenameExtras='',pause=0.5):
    "Grabs n images from camera"
    print timestamp(1), 'Grabbing %d images from %s...' % (grabImagesN,cameraPvPrefix)
    msgPv.put('Grabbing ' + str(grabImagesN) + 'images...')
    if not os.path.exists(grabImagesFilepath): os.makedirs(grabImagesFilepath)
    imagePvPrefix=cameraPvPrefix + ':' + grabImagesPlugin
    if grabImagesPlugin=='TIFF1':
        fileExt='.tif'
    elif grabImagesPlugin=='JPEG1':
        fileExt='.jpg'
    else:
        fileExt='.img'
    imageFilenameTemplate='%s%s_' + timestamp() + '_%3.3d' + fileExt
    PV(imagePvPrefix+':EnableCallbacks').put(1)
    # PV().put() doesn't seem to work for putting strings to waveforms
    #PV(imagePvPrefix+':FilePath').put(grabImagesFilepath)  
    #PV(imagePvPrefix+':FileName').put(cameraPvPrefix + '_' + grabImagesFilenameExtras)
    # os.system is deprecated, use subprocess.call instead
    #os.system('caput -t -S ' + cameraPvPrefix + ':' + grabImagesPlugin + ':FilePath ' + grabImagesFilepath + ' > /dev/null')  
    #os.system('caput -t -S ' + cameraPvPrefix + ':' + grabImagesPlugin + ':FileName ' + cameraPvPrefix + grabImagesFilenameExtras + ' > /dev/null')
    with open(os.devnull, 'wb') as devnull:
        subprocess.check_call('caput -t -S ' + cameraPvPrefix + ':' + grabImagesPlugin + ':FilePath ' + grabImagesFilepath, shell=True, stdout=devnull)
        subprocess.check_call('caput -t -S ' + cameraPvPrefix + ':' + grabImagesPlugin + ':FileName ' + cameraPvPrefix + grabImagesFilenameExtras, shell=True, stdout=devnull)
    PV(imagePvPrefix+':AutoIncrement').put(1)
    PV(imagePvPrefix+':FileTemplate').put(imageFilenameTemplate)
    PV(imagePvPrefix+':FileWriteMode').put(1)
    PV(imagePvPrefix+':NumCapture').put(grabImagesN)
    PV(imagePvPrefix+':AutoSave').put(1)
    PV(imagePvPrefix+':Capture').put(1)
    print timestamp(1), 'Pausing...'; msgPv.put('Pausing...'); sleep(pause)

def motor1DScan(motorPv,start,stop,motorRBVPv,nSteps,grabImagesFlag=0,grabImagesN=0,grabImagesSource='',grabImagesFilepath='~/pvScan/images/',grabImagesPlugin='TIFF1',grabImagesFilenameExtras='',settleTime=0.5):
    "Scans motor from start to stop in n steps"
    initialPos=motorPv.get()
    print timestamp(1), 'Starting motor scan'
    msgPv.put('Starting motor scan')
    inc=abs((stop-start)/nSteps)
    for i in range(nSteps+1):
        newPos=start + i*inc
        print timestamp(1), 'Moving %s to %f' % (motorPv.pvname,newPos)
        msgPv.put('Moving motor')
        motorPv.put(newPos)
        motorWait(motorRBVPv,newPos)
        print timestamp(1), 'Settle...'; msgPv.put('Settle...'); sleep(settleTime)
        if grabImagesFlag:
            grabImagesFilenameExtras='_MotorPos-' + str(motorPv.get())
            grabImages(grabImagesN,grabImagesSource,grabImagesFilepath,grabImagesPlugin,grabImagesFilenameExtras)
    motorPv.put(initialPos)
    print timestamp(1), 'Moving %s back to initial position: %f' %(motorPv.pvname,start)
    msgPv.put('Moving motor back to initial position')
    motorWait(motorRBVPv,initialPos)

def datalog(interval,filename,pvlist,nptsmax):
    "Logs PV data to a file; designed to be run in a separate thread. Uses dataFlag global variable which is shared between threads. PVs must be in pvlist."
    global dataFlag
    with open(filename, 'w') as datafile:
        datafile.write('Timestamp ')
        for pv in pvlist:
            datafile.write(pv.pvname)
            datafile.write(' ')
        datafile.write('\n')
        count=0
        while dataFlag and count < nptsmax:
            datafile.write(str(timestamp(1)))
            datafile.write(' ')
            for pv in pvlist:
                datafile.write(str(pv.value))
                datafile.write(' ')
            datafile.write('\n')
            sleep(interval)
            count+=1
               
                
    

##################################################################################################################
        

exit


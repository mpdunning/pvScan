# pvScan module

from epics import caget,caput,PV
from time import sleep
import datetime,math,os,sys

# PV prefix of pvScan IOC
pvPrefix=os.environ['PVSCAN_PVPREFIX']

# PV for status message
msgPv=PV(pvPrefix + ':MSG')

# Get PID for abort button
pid=os.getpid()
pidPV=PV(pvPrefix + ':PID')
pidPV.put(pid)

##################################################################################################################

def timestamp(format=None):
    "Formatted timestamp"
    if format == 1:
        return(datetime.datetime.now().strftime("%Y%m%d_%H%M%S.%f"))
    else:
        return(datetime.datetime.now().strftime("%Y%m%d_%H%M%S"))
        
class Tee(object):
    "Writes output to stdout and to log file"
    def __init__(self, name, mode):
        self.file = open(name, mode)
        self.stdout = sys.stdout
        sys.stdout = self
    def __del__(self):
        sys.stdout = self.stdout
        self.file.close()
        #self.file.flush()
    def write(self, data):
        self.file.write(data)
        self.stdout.write(data)

def motorWait(motor,val,delta=0.005):
    "Waits until motor has stopped to proceed"
    while motor.get() != val:
        if math.fabs(motor.get() - val) < delta: break
        continue

def grabImages(nImages,cameraPvPrefix,imageFilepath,imagePlugin='TIFF1',filenameExtras='',pause=0.5):
    "Grabs n images from camera"
    print timestamp(), 'Grabbing %d images from %s...' % (nImages,cameraPvPrefix)
    msgPv.put('Grabbing ' + str(nImages) + 'images...')
    if not os.path.exists(imageFilepath): os.makedirs(imageFilepath)
    imagePvPrefix=cameraPvPrefix + ':' + imagePlugin
    imageFilenameTemplate='%s%s_' + timestamp() + '_%3.3d.tif'
    #filenameExtras='Delay1-' + str(motor1Pv.get())
    PV(imagePvPrefix+':EnableCallbacks').put(1)
    #PV(imagePvPrefix+':FilePath').put(imageFilepath)
    #caput(imagePvPrefix+':FilePath',imageFilepath)
    os.system('caput -t -S ' + cameraPvPrefix + ':' + imagePlugin + ':FilePath ' + imageFilepath)
    #PV(imagePvPrefix+':FileName').put(cameraPvPrefix + '_' + filenameExtras)
    os.system('caput -t -S ' + cameraPvPrefix + ':' + imagePlugin + ':FileName ' + cameraPvPrefix + filenameExtras)
    PV(imagePvPrefix+':AutoIncrement').put(1)
    PV(imagePvPrefix+':FileTemplate').put(imageFilenameTemplate)
    PV(imagePvPrefix+':FileWriteMode').put(1)
    PV(imagePvPrefix+':NumCapture').put(nImages)
    PV(imagePvPrefix+':AutoSave').put(1)
    PV(imagePvPrefix+':Capture').put(1)
    print timestamp(1), 'Pausing...'; msgPv.put('Pausing...'); sleep(pause)

def motorScan(motorPv,start,stop,motorRBVPv,nSteps,grabImagesFlag=0,grabImagesN=0,grabImagesSource='',imageFilepath='~/pvScan/images/',imagePlugin='TIFF1',filenameExtras='',settleTime=0.5):
    "Scans motor from start to stop in n steps"
    initialPos=motorPv.get()
    print timestamp(), 'Starting scan'
    msgPv.put('Starting scan')
    inc=abs((stop-start)/nSteps)
    for i in range(nSteps+1):
        newPos=start + i*inc
        print timestamp(), 'Moving %s to %f' % (motorPv.pvname,newPos)
        msgPv.put('Moving motor')
        motorPv.put(newPos)
        motorWait(motorRBVPv,newPos)
        print timestamp(1), 'Settle...'; msgPv.put('Settle...'); sleep(settleTime)
        if grabImagesFlag:
            filenameExtras='_MotorPos-' + str(motorPv.get())
            grabImages(grabImagesN,grabImagesSource,imageFilepath,imagePlugin,filenameExtras)
    motorPv.put(initialPos)
    print timestamp(), 'Moving %s back to initial position: %f' %(motorPv.pvname,start)
    msgPv.put('Moving motor back to initial position')
    motorWait(motorRBVPv,initialPos)

def datalog(interval,filename,pvlist,nptsmax):
    "Logs PV data to a file; PVs must be in pvlist"
    #print 'Writing scan data to', filepath
    global dataFlag
    #dataFlag=0
    with open(filename, 'w') as datafile:
        datafile.write('Timestamp ')
        for pv in pvlist:
            datafile.write(pv.pvname)
            datafile.write(' ')
        datafile.write('\n')
        count=0
        #dataFlag=1
        while dataFlag==1 and count < nptsmax:
            datafile.write(str(timestamp(1)))
            datafile.write(' ')
            for pv in pvlist:
                datafile.write(str(pv.value))
                datafile.write(' ')
            datafile.write('\n')
            sleep(interval)
            count+=1
               
                
    

##################################################################################################################
        

exit


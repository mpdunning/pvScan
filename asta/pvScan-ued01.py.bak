#!/usr/bin/env python
# For doing DAQ scans.  Logs PV data to a file while doing beam scan. Uses a supporting IOC (pvScan).
# mdunning 1/7/16

from epics import caget,caput,PV,Motor
from time import sleep
import datetime,math,os,sys
from threading import Thread

pvPrefix='ASTA:PV01' # PV prefix for pvScan IOC
motorPvPrefix1='ASTA:XPSx' # Actual motor PV prefix

# For abort button; get PID & push to PV
pid=os.getpid()
pidPV=PV(pvPrefix + ':PID')
pidPV.put(pid)

# PV for status message
msgPv=PV(pvPrefix + ':MSG')

# Motors
motor1=motorPvPrefix1 + ':m4'  # Laser 1 delay
motor2=''  # Some other motor
motor3=''  # And another motor
motor1Pv=PV(motor1 + ':MOTR') # actual motor PV
motor1RBVPv=PV(motor1 + ':MOTR.RBV') # actual motor RBV PV
motor1SpeedPv=PV(motor1 + ':MOTR.VELO') # actual motor speed PV
motor1Start=PV(pvPrefix + ':MOTOR1:START').get()  # for scanning
motor1Stop=PV(pvPrefix + ':MOTOR1:STOP').get()  # for scanning
motor1NSteps=PV(pvPrefix + ':MOTOR1:NSTEPS').get()  # for scanning
motor1Speed=PV(pvPrefix + ':MOTOR1:SPEED').get()  # for scanning
# Stoppers/screens
laserShutter1Pv=PV('ASTA:THSC01:SHUTTER:OC')
laserShutter2Pv=PV('ASTA:BO:2124-8:BIT5')
screenPv=PV('ASTA:BO:2114-1:BIT5')
# ADC values
lsrpwrPv=PV('ASTA:A01:ADC1:AI:CH3')
toroid0355Pv=PV('ASTA:A01:ADC1:AI:CH4')
toroid2150Pv=PV('ASTA:A01:ADC1:AI:CH5')
structureChargePv=PV('ASTA:A01:ADC1:CALC:CH1:CONV')

# 1 or 2-sided scan
nSides=PV(pvPrefix + ':NSIDES').get()  # 0 = 2-sided, 1 = 1-sided 

pause1=1.0  # sec
pause2=2.0

#---- For data logging --------------------------
#pvlist=[laserShutter1Pv,laserShutter2Pv,screenPv,motor1RBVPv] # add whatever PVs need to be monitored
pvlist=[motor1RBVPv] # add whatever PVs need to be monitored
expName=PV(pvPrefix + ':IOC.DESC').get()
if ' ' in expName: expName=expName.replace(' ','_')
now=datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
filepath=os.environ['NFSHOME'] + '/pvScan/' + expName + '/' + now + '/'
if not os.path.exists(filepath): os.makedirs(filepath)
filepathPv=PV(pvPrefix + ':DATA:FILEPATH')
filepathPv.put(filepath)  # Write filepath to PV for display
dataFilename=filepath + now + '.dat'
dataFilenamePv=PV(pvPrefix + ':DATA:FILENAME')
dataFilenamePv.put(dataFilename)
logFilename=filepath + now + '.log'
logFilenamePv=PV(pvPrefix + ':LOG:FILENAME')
logFilenamePv.put(logFilename)
dataEnable=PV(pvPrefix + ':DATA:ENABLE').get()  # Enable/Disable data logging
dataint=PV(pvPrefix + ':DATA:INT').get()  # Interval between PV data log points
nptsmax=100000  # limits number of data points
#-------------------------------------------------

# --- For grabbing images --------------------------
imageFilepath=filepath + 'images/'
imagePlugin='TIFF1'
grabImagesEnable=PV(pvPrefix + ':GRABIMAGES:ENABLE').get()
grabImagesN=PV(pvPrefix + ':GRABIMAGES:N').get()
grabImagesSource='ANDOR1'
#-------------------------------------------------------------

##################################################################################################################

def timestamp(format=None):
    "Formatted timestamp"
    if format == 1:
        return(datetime.datetime.now().strftime("%Y%m%d_%H%M%S.%f"))
    else:
        return(datetime.datetime.now().strftime("%Y%m%d_%H%M%S"))
        
class Tee(object):
    "Writes output to stdout and to log file"
    def __init__(self, name, mode):
        self.file = open(name, mode)
        self.stdout = sys.stdout
        sys.stdout = self
    def __del__(self):
        sys.stdout = self.stdout
        self.file.close()
        #self.file.flush()
    def write(self, data):
        self.file.write(data)
        self.stdout.write(data)

def motorWait(motor,val,delta=0.005):
    "Waits until motor has stopped to proceed"
    while motor.get() != val:
        if math.fabs(motor.get() - val) < delta: break
        continue

def grabImages(n,cameraPvPrefix,pause=2.0):
    "Grabs n images from camera"
    print timestamp(), 'Grabbing %d images from %s...' % (n,cameraPvPrefix)
    msgPv.put('Grabbing ' + str(n) + 'images...')
    if not os.path.exists(imageFilepath): os.makedirs(imageFilepath)
    imagePvPrefix=cameraPvPrefix + ':' + imagePlugin
    imageFilenameTemplate='%s%s_' + timestamp() + '_%3.3d.tif'
    filenameExtras='Delay1-' + str(motor1Pv.get())
    PV(imagePvPrefix+':EnableCallbacks').put(1)
    #PV(imagePvPrefix+':FilePath').put(imageFilepath)
    #caput(imagePvPrefix+':FilePath',imageFilepath)
    # Must use os.system() here, pyEpics string to waveform put doesn't seem to work...
    os.system('caput -t -S ' + cameraPvPrefix + ':' + imagePlugin + ':FilePath ' + imageFilepath)
    if filenameExtras != '':
        PV(imagePvPrefix+':FileName').put(cameraPvPrefix + '_' + filenameExtras)
    else:
        PV(imagePvPrefix+':FileName').put(cameraPvPrefix)
    PV(imagePvPrefix+':AutoIncrement').put(1)
    PV(imagePvPrefix+':FileTemplate').put(imageFilenameTemplate)
    PV(imagePvPrefix+':FileWriteMode').put(1)
    PV(imagePvPrefix+':NumCapture').put(n)
    PV(imagePvPrefix+':AutoSave').put(1)
    PV(imagePvPrefix+':Capture').put(1)
    print timestamp(1), 'Pausing...'; msgPv.put('Pausing...'); sleep(pause)
    #sleep(pause)

def motorScan(motorPv,start,stop,motorRBVPv,nSteps,settleTime=0.2):
    "Scans motor from start to stop in n steps; grabs images if enabled"
    initialPos=motorPv.get()
    print timestamp(), 'Starting scan'
    msgPv.put('Starting scan')
    inc=abs((stop-start)/nSteps)
    for i in range(nSteps+1):
        newPos=start + i*inc
        print timestamp(), 'Moving %s to %f' % (motorPv.pvname,newPos)
        msgPv.put('Moving motor')
        motorPv.put(newPos)
        motorWait(motorRBVPv,newPos)
        print timestamp(1), 'Settle...'; msgPv.put('Settle...'); sleep(settleTime)
        if grabImagesEnable==1:
            grabImages(grabImagesN,grabImagesSource)
    motorPv.put(initialPos)
    print timestamp(), 'Moving %s back to initial position: %f' %(motorPv.pvname,start)
    msgPv.put('Moving motor back to initial position')
    motorWait(motorRBVPv,initialPos)

def datalog(interval):
    "Logs PV data to a file; PVs must be in pvlist"
    #print 'Writing scan data to', filepath
    global df
    with open(dataFilename, 'w') as datafile:
        datafile.write('Timestamp ')
        for pv in pvlist:
            datafile.write(pv.pvname)
            datafile.write(' ')
        datafile.write('\n')
        count=0
        while df==1 and count < nptsmax:
            datafile.write(str(timestamp(1)))
            datafile.write(' ')
            for pv in pvlist:
                datafile.write(str(pv.value))
                datafile.write(' ')
            datafile.write('\n')
            sleep(interval)
            count+=1
               
                
    
def scanRoutine():
    "This is the scan routine"
    print timestamp(1), 'Starting'
    msgPv.put('Starting')
    sleep(2)
    # block laser
    #print timestamp(), 'Blocking laser'
    #laserShutter1Pv.put(0)
    #laserShutter2Pv.put(0)  # just in case
    # remove profile monitor screen
    #print timestamp(), 'Removing screen'
    #screenPv.put(0)
    # Scan delay stage and grab images...
    motorScan(motor1Pv,motor1Start,motor1Stop,motor1RBVPv,motor1NSteps,2)
    # block laser
    #print timestamp(), 'Blocking laser'
    #laserShutter1Pv.put(0)
    #laserShutter2Pv.put(0)  # just in case
    print timestamp(1), 'Done'
    msgPv.put('Done')

    
    

if __name__ == "__main__":
    "Do scan routine; log PV data to file as a separate thread if enabled"
    global df
    Tee(logFilename, 'w')
    df=1
    if dataEnable==1:
        datalogthread=Thread(target=datalog,args=(dataint,))
        datalogthread.start()
    scanRoutine()
    sleep(pause1)
    df=0  # stop logging data

        
##################################################################################################################
        

exit

